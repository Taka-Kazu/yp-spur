name: ci

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  release:
    types: [published]

jobs:
  build-in-docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env:
          - UBUNTU_VERSION=trusty
          - UBUNTU_VERSION=xenial
          - UBUNTU_VERSION=bionic
          - UBUNTU_VERSION=focal
          - UBUNTU_VERSION=focal WITHOUT_GIT=true
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set environment variables
        run: echo ${{ matrix.env }} | xargs -n1 echo >> ${GITHUB_ENV}

      - name: Without git
        if: env.WITHOUT_GIT
        run: mv .git .git2

      - name: Build
        run: |
          docker build -t \
            yp-spur:${UBUNTU_VERSION} \
            -f .test.Dockerfile \
            --build-arg UBUNTU_VERSION .

  build-with-mingw:
    runs-on: ubuntu-latest
    steps:
      - name: Setup MinGW
        run: |
          sudo apt-get update -y -qq
          sudo apt-get install -y --no-install-recommends \
            gcc-mingw-w64-x86-64 \
            gcc-mingw-w64-i686 \
            g++-mingw-w64-x86-64 \
            g++-mingw-w64-i686

      - name: Build with MinGW-w64
        run: |
          mkdir -p build-win64/install
          cd build-win64
          cmake \
            -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchain-mingw-x86_64.cmake \
            -DCMAKE_INSTALL_PREFIX=$(pwd)/install \
            -DENABLE_ALL_STATIC=ON ..
          make -j
          make install
      - name: Build with MinGW
        run: |
          mkdir -p build-win32/install
          cd build-win32
          cmake \
            -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchain-mingw-i686.cmake \
            -DCMAKE_INSTALL_PREFIX=$(pwd)/install \
            -DENABLE_ALL_STATIC=ON ..
          make -j
          make install

      - name: Get release tag
        if: github.event_name == 'release'
        run: echo "TAG=${{ github.event.release.tag_name }}"
      - name: Create Windown packages
        run: |
          url=$(curl -sL https://${{ secrets.GITHUB_TOKEN }}@api.github.com/repos/openspur/ypspur-gui/releases/latest \
                  | jq '.assets[0].browser_download_url')
          wget ${url}
          (cd build-win64/install/ && unzip ../../$(basename ${url}))
          (cd build-win32/install/ && unzip ../../$(basename ${url}))
          mkdir packages
          (cd build-win64/install/ && zip -q ../../packages/yp-spur.win64.${TAG:-test}.zip -r $(ls))
          (cd build-win32/install/ && zip -q ../../packages/yp-spur.win32.${TAG:-test}.zip -r $(ls))
          (cd build-win64/ && zip -q ../packages/yp-spur-samples.win64.${TAG:-test}.zip -r samples/run-test.exe)
          (cd build-win32/ && zip -q ../packages/yp-spur-samples.win32.${TAG:-test}.zip -r samples/run-test.exe)

      - name: Deploy win64
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: packages/yp-spur.win64.${{ env.TAG }}.zip
          asset_name: yp-spur.win64.${{ env.TAG }}.zip
          asset_content_type: application/zip
      - name: Deploy win32
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: packages/yp-spur.win32.${{ env.TAG }}.zip
          asset_name: yp-spur.win32.${{ env.TAG }}.zip
          asset_content_type: application/zip
      - name: Deploy win64 sample
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: packages/yp-spur-samples.win64.${{ env.TAG }}.zip
          asset_name: yp-spur-samples.win64.${{ env.TAG }}.zip
          asset_content_type: application/zip
      - name: Deploy win32 sample
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: packages/yp-spur-samples.win32.${{ env.TAG }}.zip
          asset_name: yp-spur-samples.win32.${{ env.TAG }}.zip
          asset_content_type: application/zip
